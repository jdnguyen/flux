// Generated by CoffeeScript 1.7.1
(function() {
  var checkHit, createBullet, enemyBulletTravel, enemyShipMovement, enemyShipSpawn, init, myPulledBulletTravel, myPushedBulletTravel, myShipMove, pushBullets, retargetBullet, spawnEnemy, stage, update, _bullet_pull_multiplier, _bullet_push_multiplier, _bullet_size, _bullet_speed, _enemy_bullets, _enemy_ships, _enemy_shoot_rate, _enemy_spawn_counter, _enemy_spawn_rate, _flux_activate, _flux_capture, _flux_radius, _my_pulled_bullets, _my_pushed_bullets, _my_shield, _my_ship, _my_ship_speed, _my_ship_target_x, _ship_height, _ship_width;

  stage = new createjs.Stage("canvas");

  _my_ship = new createjs.Shape();

  _my_pulled_bullets = [];

  _my_pushed_bullets = [];

  _ship_width = 80;

  _ship_height = 30;

  _my_ship_speed = 5;

  _my_ship_target_x = null;

  _bullet_size = 5;

  _bullet_speed = 3;

  _bullet_push_multiplier = 5;

  _bullet_pull_multiplier = 2;

  _my_shield = new createjs.Shape();

  _flux_radius = 80;

  _flux_activate = false;

  _flux_capture = false;

  _enemy_ships = [];

  _enemy_bullets = [];

  _enemy_spawn_counter = 0;

  _enemy_spawn_rate = 120;

  _enemy_shoot_rate = 60;

  init = function() {
    _enemy_ships = [];
    _enemy_bullets = [];
    _my_ship.graphics.beginFill("blue").drawRect(0, 0, _ship_width, _ship_height);
    _my_shield.graphics.beginFill("#37FDFC").drawCircle(0, 0, _flux_radius);
    _my_ship.x = 100;
    _my_ship.y = stage.canvas.height - _ship_height;
    _my_shield.x = _my_ship.x + _flux_radius / 2;
    _my_shield.y = _my_ship.y + _flux_radius / 4;
    _my_shield.alpha = 0.1;
    stage.addChild(_my_shield);
    stage.addChild(_my_ship);
    stage.on("stagemousemove", function(evt) {
      if (evt.rawY < stage.canvas.height) {
        return _my_ship_target_x = evt.stageX - _ship_width / 2;
      }
    });
    stage.on("mouseleave", function(evt) {
      return _my_ship_target_x = null;
    });
    stage.on("stagemousedown", function(evt) {
      if (!_flux_activate) {
        _flux_activate = true;
        return _flux_capture = true;
      }
    });
    stage.on("stagemouseup", function(evt) {
      _flux_activate = false;
      _flux_capture = false;
      return pushBullets();
    });
    createjs.Ticker.on("tick", update);
    createjs.Ticker.setFPS(60);
    return spawnEnemy();
  };

  update = function() {
    enemyBulletTravel();
    enemyShipMovement();
    enemyShipSpawn();
    myShipMove();
    myPulledBulletTravel();
    myPushedBulletTravel();
    if (_flux_capture) {
      _flux_capture = false;
    }
    return stage.update();
  };

  pushBullets = function() {
    var bullet, i;
    i = _my_pulled_bullets.length - 1;
    while (i >= 0) {
      bullet = _my_pulled_bullets[i];
      bullet.dir_x *= -bullet.charge / _bullet_push_multiplier;
      bullet.dir_y *= -bullet.charge / _bullet_push_multiplier;
      _my_pushed_bullets.push(bullet);
      i--;
    }
    return _my_pulled_bullets = [];
  };

  myPushedBulletTravel = function() {
    var bullet, e, i, ship, _results;
    i = _my_pushed_bullets.length - 1;
    _results = [];
    while (i >= 0) {
      bullet = _my_pushed_bullets[i];
      if (bullet.y < -50) {
        stage.removeChild(bullet.shape);
        _my_pushed_bullets.splice(i, 1);
      }
      e = _enemy_ships.length - 1;
      while (e >= 0) {
        ship = _enemy_ships[e];
        if (checkHit(bullet, ship.shape)) {
          stage.removeChild(bullet.shape);
          stage.removeChild(ship.shape);
          _my_pushed_bullets.splice(i, 1);
          _enemy_ships.splice(e, 1);
          bullet = null;
          e = 0;
        }
        e--;
      }
      if (bullet) {
        bullet.shape.x += bullet.dir_x;
        bullet.shape.y += bullet.dir_y;
      }
      _results.push(i--);
    }
    return _results;
  };

  myPulledBulletTravel = function() {
    var bullet, i, _results;
    i = _my_pulled_bullets.length - 1;
    _results = [];
    while (i >= 0) {
      bullet = _my_pulled_bullets[i];
      if (checkHit(bullet, _my_ship)) {
        stage.removeChild(bullet.shape);
        _my_pulled_bullets.splice(i, 1);
        console.log("MY SHIP GOT HIT BY OWN BULLET");
      } else {
        bullet.shape.x += bullet.dir_x;
        bullet.shape.y += bullet.dir_y;
        bullet.charge++;
      }
      _results.push(i--);
    }
    return _results;
  };

  myShipMove = function() {
    var i, speed, _results;
    if (_my_ship_target_x && Math.abs(_my_ship_target_x - _my_ship.x) > _my_ship_speed) {
      speed = _my_ship_speed;
      if (_my_ship_target_x < _my_ship.x) {
        speed *= -1;
      }
      _my_ship.x += speed;
      _my_shield.x += speed;
      i = _my_pulled_bullets.length - 1;
      _results = [];
      while (i >= 0) {
        _my_pulled_bullets[i].shape.x += speed;
        _results.push(i--);
      }
      return _results;
    }
  };

  enemyBulletTravel = function() {
    var bullet, i, _results;
    i = _enemy_bullets.length - 1;
    _results = [];
    while (i >= 0) {
      bullet = _enemy_bullets[i];
      if (bullet.shape.y >= stage.canvas.height) {
        stage.removeChild(bullet.shape);
        _enemy_bullets.splice(i, 1);
      } else {
        if (checkHit(bullet, _my_ship)) {
          stage.removeChild(bullet.shape);
          _enemy_bullets.splice(i, 1);
          console.log("MY SHIP GOT HIT");
        } else if (_flux_capture && checkHit(bullet, _my_shield)) {
          _enemy_bullets[i].shape.graphics.clear().beginFill("#49E20E").drawCircle(0, 0, _bullet_size);
          _my_pulled_bullets.push(retargetBullet(_enemy_bullets[i]));
          _enemy_bullets.splice(i, 1);
        } else {
          bullet.shape.x += bullet.dir_x;
          bullet.shape.y += bullet.dir_y;
        }
      }
      _results.push(i--);
    }
    return _results;
  };

  retargetBullet = function(bullet) {
    var dist, shape, target_x, target_y;
    shape = bullet.shape;
    target_x = _my_ship.x + _ship_width / 2;
    target_y = _my_ship.y + _ship_height / 2;
    dist = Math.sqrt(Math.pow(target_x - shape.x, 2) + Math.pow(target_y - shape.y, 2));
    bullet.dir_x = (target_x - shape.x) / dist / _bullet_pull_multiplier;
    bullet.dir_y = (target_y - shape.y) / dist / _bullet_pull_multiplier;
    bullet.charge = 0;
    return bullet;
  };

  checkHit = function(obj_a, obj_b) {
    var pt;
    pt = obj_a.shape.localToLocal(0, 0, obj_b);
    return obj_b.hitTest(pt.x, pt.y);
  };

  enemyShipSpawn = function() {
    _enemy_spawn_counter++;
    if (_enemy_spawn_counter >= _enemy_spawn_rate) {
      _enemy_spawn_counter = 0;
      return spawnEnemy();
    }
  };

  enemyShipMovement = function() {
    var i, ship, _results;
    i = _enemy_ships.length - 1;
    _results = [];
    while (i >= 0) {
      ship = _enemy_ships[i];
      ship.shape.x -= 2;
      if (ship.shape.x + _ship_width <= 0) {
        stage.removeChild(ship.shape);
        _enemy_ships.splice(i, 1);
      } else {
        ship.shootCounter++;
        if (ship.shootCounter >= ship.shootDelay) {
          ship.shootCounter = 0;
          _enemy_bullets.push(createBullet(ship.shape.x, ship.shape.y));
        }
      }
      _results.push(i--);
    }
    return _results;
  };

  createBullet = function(start_x, start_y) {
    var dist, nx, ny, shape, target_x, target_y, _bullet;
    shape = new createjs.Shape();
    shape.graphics.beginFill("red").drawCircle(0, 0, _bullet_size);
    shape.x = start_x + _ship_width / 2;
    shape.y = start_y + _ship_height;
    target_x = _my_ship.x + _ship_width / 2;
    target_y = _my_ship.y + _ship_height / 2;
    dist = Math.sqrt(Math.pow(target_x - shape.x, 2) + Math.pow(target_y - shape.y, 2)) / _bullet_speed;
    nx = (target_x - shape.x) / dist;
    ny = (target_y - shape.y) / dist;
    stage.addChild(shape);
    return _bullet = {
      shape: shape,
      dir_x: nx,
      dir_y: ny
    };
  };

  spawnEnemy = function() {
    var shape, _enemy_ship;
    shape = new createjs.Shape();
    shape.graphics.beginFill("red").drawRect(0, 0, _ship_width, _ship_height);
    shape.x = stage.canvas.width;
    shape.y = 50;
    _enemy_ship = {
      shape: shape,
      shootDelay: _enemy_shoot_rate,
      shootCounter: 0
    };
    _enemy_ships.push(_enemy_ship);
    return stage.addChild(shape);
  };

  init();

}).call(this);
